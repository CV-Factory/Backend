name: CI/CD Pipeline

on:
  push:
    branches: [ "develop" ]
  workflow_dispatch:

env:
  GCP_PROJECT_ID: cvfactory-456014 # GCP 프로젝트 ID를 여기에 입력하거나 Secrets 사용
  GCP_REGION: asia-northeast3
  CLOUD_RUN_SERVICE_NAME: cvfactory-server
  GCP_SERVICE_ACCOUNT: CVFactory-server-sa@cvfactory-456014.iam.gserviceaccount.com
  ARTIFACT_REGISTRY_REMOTE_REPO: ghcr-remote # 새로 추가된 환경 변수

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write # GitHub Packages에 쓰기 권한 필요
      id-token: write # Google Cloud 인증에 필요

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Convert repository name to lowercase
      id: string
      uses: ASzc/change-string-case-action@v6
      with:
        string: ${{ github.repository_owner }}/${{ github.event.repository.name }}

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ghcr.io/${{ steps.string.outputs.lowercase }}:${{ github.sha }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Deploy to Google Cloud Run
      id: deploy
      uses: google-github-actions/deploy-cloudrun@v2
      with:
        service: ${{ env.CLOUD_RUN_SERVICE_NAME }}
        region: ${{ env.GCP_REGION }}
        # project_id: ${{ env.GCP_PROJECT_ID }} # Authenticate to Google Cloud 단계에서 이미 프로젝트 ID가 설정됨
        image: asia-northeast3-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REMOTE_REPO }}/${{ steps.string.outputs.lowercase }}:${{ github.sha }}
        # service_account: ${{ env.GCP_SERVICE_ACCOUNT }}
        env_vars: |
          PYTHONUNBUFFERED=1
          UPSTASH_REDIS_ENDPOINT=${{ secrets.UPSTASH_REDIS_ENDPOINT }}
          UPSTASH_REDIS_PORT=${{ secrets.UPSTASH_REDIS_PORT }}
        secrets: |
          GROQ_API_KEY=GROQ_API_KEY:latest
          COHERE_API_KEY=COHERE_API_KEY:latest
          UPSTASH_REDIS_PASSWORD=UPSTASH_REDIS_PASSWORD:latest
        flags: --allow-unauthenticated --port 8000 --cpu 1 --memory 2Gi --min-instances 0 --max-instances 1 --platform managed

    # If the deploy step failed, exit with an error
    - name: Check deploy status
      if: ${{ steps.deploy.outcome == 'failure' }}
      run: exit 1 